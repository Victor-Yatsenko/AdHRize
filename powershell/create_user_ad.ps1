# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ê–î
#################################################################
param (
    # Account
    [string] $FirstNameUA,
    [string] $LastNameUA,
    [string] $FirstNameEN,
    [string] $LastNameEN,
    [string] $UserUPNlogon,

    # Organization
    [string] $Office,
    [string] $Email,
    [string] $WebPage,
    [string] $Phone,
    [string] $Title,
    [string] $DepartmentName,
    [string] $Company,
    [string] $ManagerName,
    [string] $Description
)
# Account
$SamAccountName = "${FirstNameEN}.${LastNameEN}"
$FullName = "${LastNameUA} ${FirstNameUA}"
$DisplayName = "${FullName} / ${FirstNameEN} ${LastNameEN}"

# –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–∞—Ä–æ–ª—å
. "$PSScriptRoot\PasswordGenerator.ps1"
$pg = [PasswordGenerator]::new()
$pg.Length = 10 # –î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é
$pg.UseSymbols = $true
$AccountPassword = $pg.Generate()
#################################################################

# –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# –®–ª—è—Ö –¥–æ JSON-—Ñ–∞–π–ª—ñ–≤
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$SettingsJson = Join-Path $ScriptDir "settings"                   # –ü–∞–ø–∫–∏ –∑ —Ñ–∞–π–ª–∞–º–∏
$StructureJsonPath = Join-Path $SettingsJson "ad_structure.json"  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥
$ManagersJsonPath = Join-Path $SettingsJson "managers.json"       # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫—ñ–≤
$GroupsJsonPath = Join-Path $SettingsJson "groups.json"           # –ì—Ä—É–ø–æ–≤—ñ –ø–æ–ª—ñ—Ç–∏–∫–∏

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑ JSON
$StructureAD = Get-Content $StructureJsonPath -Raw | ConvertFrom-Json
$StructureManagers = Get-Content $ManagersJsonPath -Raw | ConvertFrom-Json
$StructureGroups = Get-Content $GroupsJsonPath -Raw | ConvertFrom-Json


# –ü–æ—à—É–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ dn —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ AD
function Get-DnByName {
    param (
        [string] $Name,
        $StructureJson
    )

    foreach ($dept in $StructureJson.PSObject.Properties) {
        if ($dept.Name -eq $Name) {
            return $dept.Value.dn
        }

        if ($dept.Value.subdepartments) {
            $result = Get-DnByName -Name $Name -StructureJson $dept.Value.subdepartments
            if ($result) {
                return $result
            }
        }
    }

    return $null
}

# –ü–æ—à—É–∫ –≤—ñ–¥–¥—ñ–ª—É
$OUPath = Get-DnByName -Name $DepartmentName -StructureJson $StructureAD
if (-not $OUPath) {
    Write-Host "–í—ñ–¥–¥—ñ–ª –∞–±–æ –ø—ñ–¥–≤—ñ–¥–¥—ñ–ª '$DepartmentName' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ!"
    exit 1
}

# –ü–æ—à—É–∫ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞
$Manager = Get-DnByName -Name $ManagerName -StructureJson $StructureManagers
if (-not $Manager) {
    Write-Host "–ö–µ—Ä—ñ–≤–Ω–∏–∫–∞ '$ManagerName' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ!"
    exit 1
}

# —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∑–∞–ø–æ–≤–Ω—é—î–º–æ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
try {
    New-ADUser `
        -GivenName $FirstNameUA `
        -Surname $LastNameUA `
        -Name $FullName `
        -UserPrincipalName $UserUPNlogon `
        -SamAccountName $SamAccountName `
        -DisplayName $DisplayName `
        -Office $Office `
        -EmailAddress $Email `
        -OfficePhone $Phone `
        -Title $Title `
        -Department	$DepartmentName `
        -Company $Company `
        -Manager $Manager `
        -Description $Description `
        -Path $OUPath `
        -AccountPassword (ConvertTo-SecureString $AccountPassword -AsPlainText -Force) `
        -Enabled $true

    Set-ADUser -Identity $SamAccountName -Replace @{wWWHomePage = $WebPage}
    Write-Host "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ $FullName —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ OU: $DepartmentName `n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–¥–∞–Ω–æ –ø–∞—Ä–æ–ª—å: $AccountPassword `n"
}
catch {
    Write-Host "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $_"
}


# –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø–æ–≤—ñ –ø–æ–ª—ñ—Ç–∏–∫–∏
#############################################################################################
$GroupInfo = ($StructureGroups.PSObject.Properties |
    Where-Object { $_.Name.Trim() -eq $Title.Trim() }).Value

if (-not $GroupInfo) {
    Write-Host "–ì—Ä—É–ø–∏ –¥–ª—è –ø–æ—Å–∞–¥–∏ '$Title' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ!"
    exit 1
}

$Groups = @()
$Groups += $StructureGroups.default
$Groups += $GroupInfo
$Groups = $Groups | Sort-Object -Unique

foreach ($Group in $Groups) {
    try {
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø–æ–ª—ñ—Ç–∏–∫–∞
        if (Get-ADGroup -Identity $Group -ErrorAction Stop) {
            Add-ADGroupMember -Identity $Group -Members $SamAccountName -ErrorAction Stop
            Write-Host "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≥—Ä—É–ø–æ–≤—É –ø–æ–ª—ñ—Ç–∏–∫—É:  $Group"
        }
    } catch {
        Write-Host "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≥—Ä—É–ø–æ–≤–æ—ó –ø–æ–ª—ñ—Ç–∏–∫–∏ '$Group': $_"
    }
}
Write-Host ""
#############################################################################################


# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –¢eams
######################################################################################################
# –ü–æ—à—É–∫ —Ç–æ–∫–µ–Ω—É
$envLines = Get-Content ".env"
foreach ($line in $envLines) {
    if ($line -match "^\s*TEAMS_WEBHOOK_URL\s*=\s*(.+)$") {
        $WebhookURL = $matches[1].Trim()
        break
    }
}
if (-not $WebhookURL) {
    Write-Error "–ó–º—ñ–Ω–Ω—É TEAMS_WEBHOOK_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env"
    exit
}

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Teams
$message = @"
**‚úÖ –í AD —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞** `n
üë§ **–Ü–º'—è:** $FullName | $FirstNameEN $LastNameEN`n
üè¢ **–í—ñ–¥–¥—ñ–ª:** $DepartmentName `n
üíº **–ü–æ—Å–∞–¥–∞:** $Title `n
üîë **–ü–∞—Ä–æ–ª—å:** $AccountPassword
"@

# –§–æ—Ä–º—É—î–º–æ JSON payload (–ø–µ—Ä–µ–∫–æ–¥—É—î–º–æ –∑ UTF-16LE –≤ UTF-8)
$payload = @{ text = $message } | ConvertTo-Json -Depth 2
$utf8Bytes = [System.Text.Encoding]::UTF8.GetBytes($payload)
$utf8Body = [System.IO.MemoryStream]::new($utf8Bytes)

# –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Teams
Write-Host "TEAMS_WEBHOOK_URL: $WebhookURL"

Invoke-RestMethod -Method Post -Uri $WebhookURL -Body $utf8Body -ContentType 'application/json'
######################################################################################################